{"version":3,"file":"static/js/387.ad862dfa.chunk.js","mappings":"iRAEaA,EAAUC,EAAAA,GAAAA,EAAH,4CAIPC,EAAOD,EAAAA,GAAAA,GAAH,qPAYJE,EAAOF,EAAAA,GAAAA,GAAH,yOASJG,EAAMH,EAAAA,GAAAA,IAAH,wGAMHI,EAAOJ,EAAAA,GAAAA,IAAH,8CAGJK,EAAOL,EAAAA,GAAAA,EAAH,wH,6BCgCjB,EA1Da,WACX,OAAkCM,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEA,GAAwBF,EAAAA,EAAAA,UAAS,MAAjC,eAAOG,EAAP,KAAaC,EAAb,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAuBR,OAjBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIL,GAAa,GAFjB,SAG2BM,EAAAA,GAAiBH,GAH5C,OAGUI,EAHV,OAKIL,EAAQK,EAASN,MALrB,gDAQIO,QAAQC,IAAR,MARJ,yBAUIT,GAAa,GAVjB,6EADc,uBAAC,WAAD,wBAcdU,KACC,CAACP,KAGF,UAACV,EAAD,WACGM,IAAa,SAACY,EAAA,EAAD,IAEbV,GAAwB,IAAhBA,EAAKW,SACZ,SAACrB,EAAD,qDAEDU,GACCA,EACGY,MAAM,EAAG,IACTC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,cAAeC,EAAzC,EAAyCA,UAAzC,OACH,UAACxB,EAAD,YACE,SAACC,EAAD,CACEwB,IACEH,EAAY,UAnCT,mCAmCS,OACQA,GADR,UAjC1B,uGAqCYI,IAAI,sBAEN,UAACxB,EAAD,YACE,SAACC,EAAD,UAAOoB,KACP,UAACpB,EAAD,yBAAkBqB,UAXXH,W,0MC/CjBM,EAAU,mCAEhBC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,oGACRD,IAAAA,IAAA,uCAA0CD,IADlC,cACzBG,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAc,mCAAG,WAAOC,EAAOC,GAAd,uFACVN,IAAAA,IAAA,gCACSD,EADT,iCACyCM,EADzC,iBACuDC,EADvD,yBADU,cACtBC,EADsB,yBAIrBA,EAAIJ,MAJiB,2CAAH,wDAOdK,EAAe,mCAAG,WAAM3B,GAAN,uFACXmB,IAAAA,IAAA,iBAAoBnB,EAApB,oBAAkCkB,EAAlC,oBADW,cACvBQ,EADuB,yBAEtBA,EAAIJ,MAFkB,2CAAH,sDAKfM,EAAY,mCAAG,WAAM5B,GAAN,uFACRmB,IAAAA,IAAA,iBACNnB,EADM,4BACgBkB,EADhB,oBADQ,cACpBQ,EADoB,yBAInBA,EAAIJ,MAJe,2CAAH,sDAOZO,EAAe,mCAAG,WAAO7B,EAAIyB,GAAX,uFACXN,IAAAA,IAAA,iBACNnB,EADM,4BACgBkB,EADhB,gCAC+CO,IAFpC,cACvBC,EADuB,yBAItBA,EAAIJ,MAJkB,2CAAH","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","service/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Message = styled.p`\n  font-size: 16px;\n`;\n\nexport const List = styled.ul`\n  padding-left: 18px;\n  margin: 13px auto;\n\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(165px, 1fr));\n  grid-gap: 33px;\n\n  padding: 0;\n  list-style: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  border-radius: 3px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n`;\n\nexport const Img = styled.img`\n  width: 226px;\n  height: 288px;\n  object-fit: cover;\n  border-radius: 3px;\n`;\nexport const Wrap = styled.div`\n  padding: 7px 11px;\n`;\nexport const Text = styled.p`\n  font-size: 14px;\n  line-height: 1.16;\n  :not(:last-child) {\n    margin-bottom: 11px;\n  }\n`;\n","import { useState, useEffect } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport { Img, Item, List, Text, Message, Wrap } from './Cast.styled';\n\nimport * as API from 'service/Api';\n\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(false);\n  const [cast, setCast] = useState(null);\n\n  const { id } = useParams();\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n  const defaultImg =\n    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbDIQXEOrv1eK2e7UwtKBJomqXojR2JXBSTA&usqp=CAU';\n\n  useEffect(() => {\n    async function fetchMovieCast() {\n      try {\n        setIsLoading(true);\n        const castData = await API.getMovieCast(id);\n\n        setCast(castData.cast);\n      } catch (error) {\n        // setError(true);\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovieCast();\n  }, [id]);\n\n  return (\n    <List>\n      {isLoading && <Loader />}\n\n      {cast && cast.length === 0 && (\n        <Message>We don't have any cast for this movie.</Message>\n      )}\n      {cast &&\n        cast\n          .slice(0, 12)\n          .map(({ cast_id, profile_path, original_name, character }) => (\n            <Item key={cast_id}>\n              <Img\n                src={\n                  profile_path\n                    ? `${baseImgUrl}${profile_path}`\n                    : `${defaultImg}`\n                }\n                alt=\"profile portrait\"\n              />\n              <Wrap>\n                <Text>{original_name}</Text>\n                <Text>Character: {character}</Text>\n              </Wrap>\n            </Item>\n          ))}\n    </List>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '32154ccfbac7bd65481a7123aa380b2c';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getQueryMovies = async (query, page) => {\n  const res = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`\n  );\n  return res.data;\n};\n\nexport const getMovieDetails = async id => {\n  const res = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n  return res.data;\n};\n\nexport const getMovieCast = async id => {\n  const res = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n};\n\nexport const getMovieReviews = async (id, page) => {\n  const res = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return res.data;\n};\n"],"names":["Message","styled","List","Item","Img","Wrap","Text","useState","isLoading","setIsLoading","cast","setCast","id","useParams","useEffect","API","castData","console","log","fetchMovieCast","Loader","length","slice","map","cast_id","profile_path","original_name","character","src","alt","API_KEY","axios","getTrendingMovies","response","data","getQueryMovies","query","page","res","getMovieDetails","getMovieCast","getMovieReviews"],"sourceRoot":""}